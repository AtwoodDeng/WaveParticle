// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalculateHeightMap
#pragma kernel CalculateNormalMap
#pragma kernel CalculateTool
#pragma kernel CalculateDetailHeight

struct ParticleInfo
{
    float3 pos;
    float radius;
    float height;
    float dxdz;
};

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> HeightMap;
RWTexture2D<float4> NormalMap;
RWTexture2D<float4> ToolMap;
RWTexture2D<float4> OutputMap;
RWTexture2D<float4> OutputMap2;

Texture2D<float4> DetailNormalMap; 
Texture2D<float4> FlowMap;
RWStructuredBuffer<ParticleInfo> ParticleInfos;


int _Resolution;
int _ParticleCount;
float4 _Range;
float4 _ResRange; // 1.0 / resolution.xy * _Range.xy , 1.0 / resolution.xy

float _InfectRadiusFallOff;
float _InfectDistanceFallOff;

#define THREAD_NUM 8

#include "UnityCG.cginc"
#include "WaveSurface.cginc"
#include "WaveDetailCS.cginc" 

#define USE_JACOB 1
#define USE_SSS 0


float3 IDtoPos(uint3 id )
{
    return float3( id.x * _ResRange.x * 2.0 - _Range.x , 0 ,
    id.y * _ResRange.y * 2.0 - _Range.y);
}

float2 IDtoUV(uint3 id )
{
    return float2( (id.xy + 0.5 ) * _ResRange.zw );
}


float absMax( float a , float b )
{
    return (abs(a)>abs(b))? a : b ;
}


[numthreads(THREAD_NUM,THREAD_NUM,1)]
void CalculateHeightMap (uint3 id : SV_DispatchThreadID)
{
    float3 vertexPos = IDtoPos(id);
    
    float height = 0;
    float2 offsetXZ = float2(0,0);

    for( int i = 0 ; i < _ParticleCount; ++ i ) 
    {
         float3 ppos = ParticleInfos[i].pos;
         float radius = ParticleInfos[i].radius;
         float heightAmplitude = ParticleInfos[i].height;
         float dxdz = ParticleInfos[i].dxdz;

         float h;
         float2 off;
         GetWaveOffset( vertexPos , ppos , _Range , radius , heightAmplitude , dxdz , h , off );
           
         height += h;
         offsetXZ += off;

    }
    

    HeightMap[id.xy] = float4( height , offsetXZ.x , offsetXZ.y , 0 );
}



[numthreads(THREAD_NUM,THREAD_NUM,1)]
void CalculateNormalMap (uint3 id : SV_DispatchThreadID)
{
    float3 pos = IDtoPos(id);
    float3 off = HeightMap[id.xy];
    pos.xz += off.yz;
    pos.y = off.x;
    
    int offsetU[4] = {1,0,-1,0};
    int offsetV[4] = {0,1,0,-1};
    float3 neighPos[4];
    float3 normals[4];
    uint i = 0;

    for ( i = 0 ; i < 4 ; ++ i )
    {
        uint3 temID = ( id + uint3(offsetU[i],offsetV[i],0)) % _Resolution;
        neighPos[i] = IDtoPos(temID);
        float4 offset = HeightMap[temID.xy];
        neighPos[i].xz += offset.yz;
        neighPos[i].y = offset.x;
    }

    for ( i = 0 ; i < 4 ; ++ i )
    {
        float3 neiPos1 = neighPos[i];
        float3 neiPos2 = neighPos[(i+1)%4];

        normals[i] = normalize(cross(normalize(neiPos1-pos),normalize(pos-neiPos2) ));
        //normals[i] = normalize(neiPos1-pos); 
    }

    float3 normal = float3(0,0,0);

    for ( i = 0 ; i < 4 ;++ i)
    {
        normal += normals[i];
    }

    NormalMap[id.xy] = float4( normalize(normal) , 0 );
}


[numthreads(THREAD_NUM,THREAD_NUM,1)]
void CalculateDetailHeight (uint3 id : SV_DispatchThreadID){

    float2 uv = IDtoUV(id);
    float3 normal = NormalMap[id.xy].xyz;
    float3 tangent = float3(0,0,1);
    
    float3 detailNormal = DetailNormal(uv,normal,tangent) * 0.5;
    normal = normalize(normal + detailNormal);

    OutputMap[id.xy] = HeightMap[id.xy] + float4( detailNormal.yxz , 0 ) * 0.2;
    OutputMap2[id.xy] = float4(normal,0);

}


float GetCurve(float3 pos1 , float3 pos2 , float3 n1 , float3 n2)
{
    return dot( n2 - n1 , pos2 - pos1 ) / length(pos2-pos1);
}

[numthreads(THREAD_NUM,THREAD_NUM,1)]
void CalculateTool (uint3 id : SV_DispatchThreadID)
{
    float3 pos = IDtoPos(id);
    float3 off = HeightMap[id.xy];
    pos.xz += off.yz;
    pos.y = off.x;
    float3 normal = NormalMap[id.xy];
    
    int offsetU[4] = {1,0,-1,0};
    int offsetV[4] = {0,1,0,-1};
    float3 neighPos[4];
    float curve=0;
    float InfectValue = 0;
    float J = 0;
     
    
    uint i = 0;

    for ( i = 0 ; i < 4 ; ++ i )
    {
        uint3 temID = ( id + uint3(offsetU[i],offsetV[i],0)) % _Resolution;
        neighPos[i] = IDtoPos(temID);
        float4 offset = HeightMap[temID.xy];
        neighPos[i].xz += offset.yz;
        neighPos[i].y = offset.x;
    }


#if USE_SSS
    float3 normals[4];
    for ( i = 0 ; i < 4 ; ++ i )
    {
        uint3 temID = ( id + uint3(offsetU[i],offsetV[i],0)) % _Resolution;
        normals[i] = NormalMap[temID.xy];
    }
    
    for ( i = 0 ; i < 4 ;++ i)
    {
        float c = GetCurve(neighPos[i],pos,normals[i],normal);

        curve += c * c;
    }

    curve = sqrt(curve / 4);

     
    for( int i = 0 ; i < _ParticleCount; ++ i )
    {
         float3 ppos = ParticleInfos[i].pos;
         float radius = ParticleInfos[i].radius;
         float heightAmplitude = ParticleInfos[i].height;
         float dxdz = ParticleInfos[i].dxdz;
         
        float offsetX = GetOffset( ppos.x , pos.x , _Range.x );
        float offsetZ = GetOffset( ppos.z , pos.z , _Range.y );
            
        float length = sqrt( offsetX * offsetX + offsetZ * offsetZ );

        float value = pow( max( 0 , 1 - length / radius  ) , _InfectDistanceFallOff ) * pow( radius , _InfectRadiusFallOff );

        InfectValue += value;
    }
#endif

#if USE_JACOB
    float3 disp_x = neighPos[0];
    float3 disp_z = neighPos[1];
    
	// The determinant of the displacement Jacobian is a good measure for turbulence:
	// > 1: Stretch
	// < 1: Squash
	// < 0: Overlap
	float4 du = float4(disp_x.xz, disp_z.xz) - pos.xzxz;

	J = (du.x * du.w - du.y * du.z) / (_Range.z * _Range.w) * 100;
    
#endif
    ToolMap[id.xy] = float4( curve * 10, InfectValue * 0.01, J , 0 );
}